# SISTEMA DE REGISTRO UMG

cursos, notas, historial, cola_revisiones = [], [], [], []

def pedir(mensaje, tipo=str, valid=None):
    while True:
        val = input(mensaje).strip()
        if not val: print("‚ö†Ô∏è No puede estar vac√≠o."); continue
        try:
            val = tipo(val)
            if valid and not valid(val): raise ValueError
            return val
        except: print("‚ö†Ô∏è Valor inv√°lido.")

def indice(nombre):
    for i, n in enumerate(cursos):
        if n.lower() == nombre.lower(): return i
    return None

def registrar():
    cursos.append(pedir("Curso: "))
    nota = pedir("Nota (0-100): ", float, lambda x: 0 <= x <= 100)
    notas.append(nota)
    historial.append(f"Registro {cursos[-1]}: {nota}")
    print("‚úÖ Registrado con √©xito.")

def mostrar():
    if not cursos: return print("‚ö†Ô∏è No hay cursos.")
    for i, (c, n) in enumerate(zip(cursos, notas), 1): print(f"{i}. {c} - {n}")
    print(f"üìä Promedio: {sum(notas)/len(notas):.2f}")

def actualizar():
    if not cursos: return print("‚ö†Ô∏è No hay cursos.")
    n = input("Curso a actualizar: ").strip()
    i = indice(n)
    if i is None: return print("‚ö†Ô∏è No encontrado.")
    ant = notas[i]
    notas[i] = pedir("Nueva nota: ", float, lambda x: 0 <= x <= 100)
    historial.append(f"Actualiz√≥ {cursos[i]}: {ant}‚Üí{notas[i]}")
    print("‚úÖ Actualizado.")

def eliminar():
    if not cursos: return print("‚ö†Ô∏è No hay cursos.")
    n = input("Curso a eliminar: ").strip()
    i = indice(n)
    if i is None: return print("‚ö†Ô∏è No encontrado.")
    if input(f"¬øEliminar '{cursos[i]}'? (s/n): ").lower() == 's':
        historial.append(f"Elimin√≥ {cursos[i]}: {notas[i]}")
        cursos.pop(i); notas.pop(i)
        print("üóëÔ∏è Eliminado.")

def contar():
    if not notas: return print("‚ö†Ô∏è No hay notas.")
    a = sum(1 for x in notas if x >= 60)
    print(f"‚úÖ Aprobados: {a} | ‚ùå Reprobados: {len(notas)-a}")

def buscar_lineal():
    if not cursos: return print("‚ö†Ô∏è No hay cursos.")
    t = input("Buscar: ").lower()
    res = [(c, n) for c, n in zip(cursos, notas) if t in c.lower()]
    print("\n".join(f"- {c}: {n}" for c, n in res) if res else "No encontrados.")

def ordenar_por_nota():
    if not cursos: return print("‚ö†Ô∏è No hay cursos.")
    datos = sorted(zip(cursos, notas), key=lambda x: x[1], reverse=True)
    print("\n".join(f"{i+1}. {c} - {n}" for i, (c, n) in enumerate(datos)))

def ordenar_por_nombre():
    if not cursos: return print("‚ö†Ô∏è No hay cursos.")
    datos = sorted(zip(cursos, notas), key=lambda x: x[0].lower())
    print("\n".join(f"{i+1}. {c} - {n}" for i, (c, n) in enumerate(datos)))
    return [c for c, _ in datos], [n for _, n in datos]

def busqueda_binaria():
    if not cursos: return print("‚ö†Ô∏è No hay cursos.")
    c_ord, n_ord = ordenar_por_nombre()
    t = input("Buscar (binaria): ").lower()
    l, r = 0, len(c_ord)-1
    while l <= r:
        m = (l+r)//2
        if c_ord[m].lower() == t: return print(f"üîé {c_ord[m]}: {n_ord[m]}")
        if t < c_ord[m].lower(): r = m-1
        else: l = m+1
    print("No encontrado.")

def revisiones():
    if not cursos: return print("‚ö†Ô∏è No hay cursos.")
    print("Ingrese cursos para revisi√≥n ('fin' para terminar):")
    while (c:=input("> ").strip().lower()) != 'fin':
        if c: cola_revisiones.append(c)
    while cola_revisiones: print(f"Revisando: {cola_revisiones.pop(0)}")
    print("‚úÖ Revisiones completadas.")

def ver_historial():
    if not historial: return print("‚ö†Ô∏è Sin historial.")
    print("\nüìú HISTORIAL:")
    for i, h in enumerate(reversed(historial), 1): print(f"{i}. {h}")

def menu():
    opciones = {
        1: registrar, 2: mostrar, 3: lambda: print(f"üìä Promedio: {sum(notas)/len(notas):.2f}" if notas else "‚ö†Ô∏è No hay notas."),
        4: contar, 5: buscar_lineal, 6: actualizar, 7: eliminar,
        8: ordenar_por_nota, 9: ordenar_por_nombre, 10: busqueda_binaria,
        11: revisiones, 12: ver_historial
    }
    while True:
        print("\n====== GESTOR DE NOTAS ======\n1. Registrar\n2. Mostrar\n3. Promedio\n4. Aprobados/Reprobados\n5. Buscar\n6. Actualizar\n7. Eliminar\n8. Ordenar por nota\n9. Ordenar por nombre\n10. B√∫squeda binaria\n11. Revisiones\n12. Historial\n13. Salir")
        try: op = int(input("Opci√≥n: "))
        except: op = 0
        if op == 13: return print("üëã Adi√≥s.")
        opciones.get(op, lambda: print("‚ö†Ô∏è Opci√≥n inv√°lida."))()

if __name__ == "__main__":
    menu()


